<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:wd-connector="http://www.mulesoft.org/schema/mule/wd-connector" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:core="http://www.mulesoft.org/schema/mule/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/wd-connector http://www.mulesoft.org/schema/mule/wd-connector/current/mule-wd-connector.xsd">
	<batch:job name="syncAccountsBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />

		<batch:process-records>
			<batch:step name="getCustomerInWorkdayStep">
				<enricher doc:name="Enrich payload with 'wdayfCustomerReference'"
					source="#[payload.type == null || payload.value == null ? null : payload]" target="#[payload.wdayfCustomerReference]">
                    <processor-chain doc:name="Processor Chain">
                        <dw:transform-message doc:name="Create GetCustomers Request">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Get_Customers_Request: {
		ns0#Request_Criteria: {
			ns0#Customer_Reference_ID: payload.Id
		},
		ns0#Response_Group: {
			ns0#Include_Reference: true,
			ns0#Include_Customer_Data: true
		}
	}
}]]></dw:set-payload>
                        </dw:transform-message>
                        <wd-connector:invoke config-ref="Workday__Basic" type="Revenue_Management||Get_Customers" doc:name="Get Customer by ID"/>
                        <dw:transform-message metadata:id="6519e0d1-9381-4686-b460-44e8ad18e4cc" doc:name="Get Customer Reference">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 urn:com.workday/bsvc
---
{
	type: payload.ns0#Get_Customers_Response.ns0#Response_Data.ns0#Customer.ns0#Customer_Reference.ns0#ID.@ns0#type,
	value: payload.ns0#Get_Customers_Response.ns0#Response_Data.ns0#Customer.ns0#Customer_Reference.ns0#ID
}]]></dw:set-payload>
                        </dw:transform-message>
                    </processor-chain>

				</enricher>
			</batch:step>
			<batch:step name="upsertWorkdayCustomer">
                <logger message="Upserting Customer with ID:  #[payload.Id], Name: #[payload.Name]" level="INFO" doc:name="Log Upsert"/>
                <dw:transform-message doc:name="Create PutCustomer Request">
                    <dw:set-payload><![CDATA[%dw 1.0
%function countryMapping(salesforceCountry) {
	(workdayCountry: 'USA') when salesforceCountry == 'USA'
} unless salesforceCountry is :null otherwise workdayCountry: p('wdayf.country')

%function industryToCustomerCategoryMapping(industry) {
	(customerCategory: 'CUSTOMER_CATEGORY-6') when industry == 'Biotechnology',
	(customerCategory: 'CUSTOMER_CATEGORY-7') when industry == 'Retail',
	(customerCategory: 'CUSTOMER_CATEGORY-4-8') when industry == 'Manufacturing',
	(customerCategory: 'CUSTOMER_CATEGORY-4') when industry == 'Hospitality',
	(customerCategory: 'CUSTOMER_CATEGORY-5') when industry == 'Technology',
	(customerCategory: 'CUSTOMER_CATEGORY-1') when industry == 'Finance',
	(customerCategory: 'CUSTOMER_CATEGORY-6-9') when industry == 'Healthcare'
} unless industry is :null otherwise customerCategory: "CUSTOMER_CATEGORY-3"

%function stateMapping(salesforceState) {
	(workdayState: 'USA-CA') when salesforceState == 'CA'
} unless salesforceState is :null otherwise workdayState: p('wdayf.state')
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Put_Customer_Request: {
		(ns0#Customer_Reference: {
			ns0#ID @(ns0#type: payload.wdayfCustomerReference.type): payload.wdayfCustomerReference.value
		}) when payload.wdayfCustomerReference != null,
		ns0#Customer_Data: {
			ns0#Customer_Reference_ID: payload.Id,
			ns0#Customer_Name: payload.Name,
			ns0#Customer_Category_Reference: {
				ns0#ID @(ns0#type: "Customer_Category_ID"): industryToCustomerCategoryMapping(payload.Industry).customerCategory default "CUSTOMER_CATEGORY-3"
			},
			ns0#Business_Entity_Data: {
				ns0#Business_Entity_Name: payload.Name,
				ns0#Contact_Data: {
					ns0#Address_Data: {
						ns0#Country_Reference: {
							ns0#ID @(ns0#type: "ISO_3166-1_Alpha-3_Code"): countryMapping(payload.BillingAddress.country).workdayCountry default p('wdayf.country')
						},
						ns0#Address_Line_Data @(ns0#Type: "ADDRESS_LINE_1"): payload.BillingAddress.street default p('wdayf.street'),
						ns0#Municipality: payload.BillingAddress.city default p('wdayf.city'),
						ns0#Country_Region_Reference: {
							ns0#ID @(ns0#type: "Country_Region_ID"): stateMapping(payload.BillingAddress.state).workdayState default p('wdayf.state')
						},
						ns0#Postal_Code: payload.BillingAddress.postalCode default p('wdayf.postalCode'),
						ns0#Usage_Data @(ns0#Public: false): {
							ns0#Type_Data @(ns0#Primary: true): {
								ns0#Type_Reference: {
									ns0#ID @(ns0#type: "Communication_Usage_Type_ID"): "BUSINESS"
								}
							}
						}
					},
					ns0#Phone_Data: {
						ns0#Phone_Number: payload.Phone default p('wdayf.phone'),
						ns0#Phone_Device_Type_Reference: {
							ns0#ID @(ns0#type: "Phone_Device_Type_ID"): "1063.5"
						},
						ns0#Usage_Data @(ns0#Public: true): {
							ns0#Type_Data @(ns0#Primary: true): {
								ns0#Type_Reference: {
									ns0#ID @(ns0#type: "Communication_Usage_Type_ID"): "BUSINESS"
								}
							}
						}
					},
					(ns0#Web_Address_Data: {
						ns0#Web_Address: payload.Website when (payload.Website matches /http(s)?:\/\/.*/)  otherwise "http://" ++ payload.Website,
						ns0#Usage_Data: {
							ns0#Type_Data @(ns0#Primary: true): {
								ns0#Type_Reference: {
									ns0#ID @(ns0#type: "Communication_Usage_Type_ID"): "BUSINESS"
								}
							}
						}
					}) when payload.Website != null
				}
			}
		}
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <wd-connector:invoke config-ref="Workday__Basic" type="Revenue_Management||Put_Customer" doc:name="Upsert Customer"/>
			</batch:step>

		</batch:process-records>
		<batch:on-complete>
            <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
            <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log 'Migration process has finished'"/>
		</batch:on-complete>
	</batch:job>
</mule>
